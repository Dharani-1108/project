# -*- coding: utf-8 -*-
"""travel_story.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SBIpV8ZGNzHo9iqgXp0W2WdKmx8rHOR
"""

import openai
import requests
import wikipediaapi
import io
import time
import onnx
import numpy as np
from PIL import Image
# from moviepy.editor import *  # For video editing
from gtts import gTTS  # For text-to-speech
from onnxruntime import InferenceSession
from transformers import AutoModelForCausalLM, AutoTokenizer
from config import OPENAI_API_KEY # Import the latest API key from config.py
from config import llm, amadeus
import openai
import faiss
from moviepy.editor import AudioFileClip, ImageClip, concatenate_videoclips
from utils import update_faiss_index , generate_travel_story_rag, generate_travel_plan_rag, retrieve_relevant_docs
from io import BytesIO

# ‚úÖ Ensure OpenAI API is using the latest key
openai.api_key = OPENAI_API_KEY  # This ensures the latest key is used every time

# ‚úÖ Initialize OpenAI Client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# ‚úÖ Wikipedia API Setup
wiki = wikipediaapi.Wikipedia(user_agent="MyTravelApp/1.0", language="en")

# ‚úÖ Function to fetch travel data from Wikipedia
def get_wikipedia_summary(place):
    page = wiki.page(place)
    return page.summary[:500] if page.exists() else "No Wikipedia summary found."

def generate_travel_story(origin, destination, purpose, start_date, end_date):
    # wikipedia_info = get_wikipedia_summary(destination)
    update_faiss_index(destination)
    wikipedia_info = generate_travel_story_rag(origin, destination, start_date, end_date, purpose)

    purpose_templates = {
      "leisure": f"You are about to embark on a relaxing leisure trip starting from {origin} to {destination} from {start_date} to {end_date}. Describe your journey, including your departure experience, flight details, and how you arrive at {destination}. Highlight the famous landmarks, scenic parks, and peaceful experiences during your visit.",

      "food": f"As a food lover, you're traveling from {origin} to {destination} from {start_date} to {end_date} to explore its vibrant culinary scene. Describe the unique food experiences from the departure airport to your destination, including delicious street food, high-end restaurants, and bustling food markets in {destination}. Mention iconic caf√©s and dishes travelers should not miss.",

      "adventure": f"You're departing from {origin} to {destination} for an adrenaline-filled adventure from {start_date} to {end_date}. Describe your travel experience, flight, and arrival at {destination}. Highlight the thrilling activities such as hiking, surfing, skydiving, and other outdoor experiences that make this trip exhilarating.",

      "business": f"You're traveling from {origin} to {destination} for a business trip from {start_date} to {end_date}. Describe your departure from {origin}, your flight experience, and how you arrive at {destination}. Detail your meetings, networking events, and the city's corporate atmosphere. Also, mention after-hours dining or sightseeing to balance work and leisure.",

      "romantic": f"You're setting off from {origin} to {destination} for a romantic getaway from {start_date} to {end_date}. Describe the journey from {origin}, including your travel experience and how you and your partner arrive at {destination}. Highlight intimate dinners, scenic walks, breathtaking sunset views, and special moments shared during this trip.",

      "spiritual": f"You're traveling from {origin} to {destination} for a spiritual retreat from {start_date} to {end_date}. Describe your departure experience from {origin}, flight details, and arrival at {destination}. Mention meditation spots, temples, churches, and peaceful landscapes that provide a sense of tranquility and reflection.",

      "family": f"You're taking a family trip from {origin} to {destination} from {start_date} to {end_date}, creating memorable bonding moments. Describe your journey, including how you and your family prepare for the trip, your flight experience, and your arrival at {destination}. Highlight amusement parks, kid-friendly attractions, and activities that make this a joyful and unforgettable experience for everyone."
    }


    purpose_prompt = purpose_templates.get(purpose, purpose_templates["leisure"])

    full_prompt = f"""
    {purpose_prompt}

    Be immersive, engaging, and detailed. Use vivid descriptions and include unique aspects of {destination}.

    Wikipedia Summary: {wikipedia_info}

    Travel Story:
    """

    response = llm.invoke(full_prompt)
    return response.content if hasattr(response, 'content') else str(response)

# ‚úÖ Function to generate a travel plan
def generate_travel_plan(origin, destination, start_date, end_date, purpose):
    update_faiss_index(destination)
    travel_plan_context = generate_travel_plan_rag(origin, destination, start_date, end_date, purpose)
    prompt = f"""
    Generate a detailed travel itinerary for a trip starting from {origin} to {destination} from {start_date} to {end_date} for {purpose}. Use {travel_plan_context} as a reference.

    Include the following details:
    - **Departure details** from {origin}, including flight or transportation options.
    - **Arrival experience** in {destination} and first impressions.
    - **Accommodation recommendations** suitable for {purpose}.
    - **Top attractions** in {destination} that match {purpose}.
    - **Food and dining recommendations**, including famous restaurants.
    - **Local transportation options** to navigate within {destination}.
    - **Return trip details** from {destination} back to {origin} (if applicable).

    Ensure the itinerary is engaging and structured as a day-by-day plan.

    Travel Itinerary:
    """
    response = llm.invoke(prompt)
    return response.content if hasattr(response, 'content') else str(response)

# ‚úÖ Function to extract day-wise highlights
def extract_daywise_highlights(travel_plan):
    days = travel_plan.split("Day ")[1:]
    daywise_highlights = {}
    for day in days:
        lines = day.split("\n")
        day_number = lines[0].strip()
        activities = ". ".join([line.strip() for line in lines[1:] if line.strip()])
        daywise_highlights[day_number] = activities
    return daywise_highlights

# ‚úÖ Function to generate travel images per day's activity
def generate_travel_images(daywise_highlights, destination):
    image_urls = {}
    for day, activities in daywise_highlights.items():
        prompt = f"Generate an ultra-HD image representing {activities} in {destination}."
        response = client.images.generate(
            model="dall-e-3", prompt=prompt, n=1, size="1024x1024"
        )
        image_urls[day] = response.data[0].url
    return image_urls

# ‚úÖ Function to generate a voice-over for the itinerary
def generate_voiceover(travel_plan, output_audio="travel_narration.mp3"):
    tts = gTTS(text=travel_plan, lang="en", slow=False)
    tts.save(output_audio)
    return output_audio

def create_travel_video(image_urls, narration_audio, output_video="travel_story.mp4"):
    # Load the narration audio
    audio_clip = AudioFileClip(narration_audio)
    total_audio_duration = audio_clip.duration
    num_days = len(image_urls)
    image_duration = total_audio_duration / num_days  # Divide equally among days

    image_clips = []
    for day, url in image_urls.items():
        response = requests.get(url)
        if response.status_code == 200:
            image = Image.open(BytesIO(response.content))
            image_path = f"travel_image_{day}.jpg"
            image.save(image_path)

            # Create an ImageClip with the specified duration
            clip = ImageClip(image_path, duration=image_duration).set_fps(24)
            clip = clip.resize(lambda t: 1 + 0.01 * t)  # Slow zoom-in effect
            image_clips.append(clip)
        else:
            print(f"Unable to fetch image for Day {day}. Status code: {response.status_code}")

    # Concatenate all image clips into a single video
    video_clip = concatenate_videoclips(image_clips, method="compose")
    video_clip = video_clip.set_audio(audio_clip)

    # Write the video file
    video_clip.write_videofile(output_video, codec="libx264", fps=24, audio_codec="aac")
    print("üé¨ Personalized travel video created successfully!")
    return output_video

# ‚úÖ Execution for Testing
if __name__ == "__main__":
    origin = "New York"
    destination = "Hyderabad"
    purpose = "Family"
    start_date = "2025-04-15"
    end_date = "2025-04-20"

    print("üìÖ Generating Travel Plan...")
    travel_plan = generate_travel_plan(origin, destination, start_date, end_date, purpose)
    print(f"üìù Travel Plan:\n{travel_plan}")

    # ‚úÖ Extract day-wise activities
    daywise_highlights = extract_daywise_highlights(travel_plan)

    print("üîÑ Fetching data and generating travel story...")
    travel_story_text = generate_travel_story(origin, destination, purpose, start_date, end_date)
    print(f"üìñ Travel Story:\n{travel_story_text}")

    print("üñº Generating Travel Images...")
    image_urls = generate_travel_images(daywise_highlights, destination)
    print(f"Generated Images: {image_urls}")

    print("üé§ Generating voiceover...")
    narration_file = generate_voiceover(travel_story_text)

    print("üé• Creating travel video...")
    travel_video = create_travel_video(image_urls, narration_file)
    print(f"‚úÖ Travel video saved as {travel_video}")