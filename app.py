# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EIL3uwptBNE_1aQGAKnsaW1gxDpzW-cY
"""
import openai
import wikipediaapi
import serpapi
import requests
import gtts
import onnx
import onnxruntime
import huggingface_hub
import streamlit
import amadeus
import faiss

import streamlit as st
from travel_story import generate_travel_story, generate_voiceover, create_travel_video, generate_travel_plan, generate_travel_images, extract_daywise_highlights
from utils import fetch_weather, fetch_tourist_attractions, fetch_flight_details, fetch_restaurants, fetch_hotels
from config import llm  # Ensure llm is imported for LLM calls
import requests
from PIL import Image
from io import BytesIO
from moviepy.editor import AudioFileClip
from serpapi import GoogleSearch

# Set up Streamlit Page
st.set_page_config(page_title="✈️ AI Travel Planner", layout="wide")

st.title("✈️ AI Travel Planner 🏨")

# Sidebar Inputs
st.sidebar.title("Plan Your Trip 🗺")
origin = st.sidebar.text_input("Enter Origin City", "New York")
destination = st.sidebar.text_input("Enter Destination", "Paris")
start_date = st.sidebar.date_input("Start Date")
end_date = st.sidebar.date_input("End Date")
purpose = st.sidebar.selectbox("Purpose of Visit", ["Leisure", "Business", "Adventure", "Romantic", "Family"])

# Initialize session state for storing travel plan and conversation
if "travel_plan" not in st.session_state:
    st.session_state.travel_plan = None
    st.session_state.travel_details = {}

if "conversation" not in st.session_state:
    st.session_state.conversation = []

# Keep track of message processing state
if "message_to_process" not in st.session_state:
    st.session_state.message_to_process = None

# Generate Travel Plan & Fetch Details
if st.sidebar.button("Generate Travel Plan & Details", key="gen_plan_btn"):
    with st.spinner("🔄 Generating AI travel plan & fetching details..."):
        travel_plan_text = generate_travel_plan(origin, destination, start_date, end_date, purpose)
        weather_info = fetch_weather(destination)
        tourist_attractions = fetch_tourist_attractions(destination)
        restaurants = fetch_restaurants(destination, purpose)
        hotels = fetch_hotels(destination)
        flights = fetch_flight_details(origin, destination, start_date, return_date=None, max_price=None, airline_name=None)

        # Store the travel plan in session state for the chatbot to use
        st.session_state.travel_plan = travel_plan_text
        st.session_state.travel_details = {
            "weather": weather_info,
            "attractions": tourist_attractions,
            "restaurants": restaurants,
            "hotels": hotels,
            "flights": flights
        }

    # Display the generated plan and details
    st.subheader("📅 Your AI-Generated Travel Plan")
    st.write(travel_plan_text)
    st.subheader(f"🌦 Weather Forecast in {destination}")
    st.write(weather_info)
    st.subheader(f"🏛 Top Attractions in {destination}")
    st.write(tourist_attractions)
    st.subheader(f"🍽 Best Restaurants in {destination}")
    st.write(restaurants)
    st.subheader(f"🏨 Recommended Hotels in {destination}")
    st.write(hotels)
    st.subheader(f"✈️ Flights from {origin} to {destination}")
    st.write(flights)

# Generate Travel Story & Voiceover
if st.sidebar.button("Generate Story & Voiceover", key="gen_story_btn"):
    with st.spinner("🔄 Generating AI travel story..."):
        travel_story_text = generate_travel_story(origin, destination, purpose, start_date, end_date)
        narration_audio = generate_voiceover(travel_story_text)

    st.subheader("📖 Your AI-Generated Travel Story")
    st.write(travel_story_text)
    st.subheader("🎤 AI Voiceover")
    st.audio(narration_audio)

# Generate Images & Video
if st.sidebar.button("Generate Images & Video", key="gen_media_btn"):
    with st.spinner("🖼 Generating Travel Images..."):
        travel_plan_text = generate_travel_plan(origin, destination, start_date, end_date, purpose)
        daywise_highlights = extract_daywise_highlights(travel_plan_text)
        travel_images = generate_travel_images(daywise_highlights, destination)

    st.subheader("🖼 View Destination Images")
    if travel_images:
        for day, image_url in travel_images.items():
            try:
                response = requests.get(image_url)
                if response.status_code == 200:
                    image = Image.open(BytesIO(response.content))
                    st.image(image, caption=f"Day {day}: A view of {destination}", use_column_width=True)
                else:
                    st.warning(f"❌ Unable to fetch image for Day {day}. Try again later.")
            except Exception as e:
                st.error(f"Error fetching image for Day {day}: {e}")
    else:
        st.warning("❌ No images generated.")

    with st.spinner("🎥 Creating AI Travel Video..."):
        travel_plan_text = generate_travel_plan(origin, destination, start_date, end_date, purpose)
        daywise_highlights = extract_daywise_highlights(travel_plan_text)
        travel_images = generate_travel_images(daywise_highlights, destination)
        narration_audio = generate_voiceover(travel_plan_text)
        travel_video = create_travel_video(travel_images, narration_audio)

    st.subheader("🎥 AI-Generated Travel Video")
    if travel_video:
        st.video(travel_video)
    else:
        st.warning("❌ Video generation failed.")

st.success("✅ AI Travel Planner is ready!")

# =======================
# Interactive Chat Section
# =======================

st.markdown("---")
st.header("🤖 Chat with Your Travel Planner")
st.write("Ask questions about your trip or request modifications to your plan.")


def update_message_to_process():
# First, check if there's a message to process from the previous run
    if st.session_state.message_to_process:
        with st.spinner("Processing your message..."):
            # Get the message to process
            message = st.session_state.message_to_process

            # Add user message to conversation
            st.session_state.conversation.append({"role": "user", "content": message})

            # Build context for the LLM based on existing travel information
            context = f"Origin: {origin}, Destination: {destination}, Dates: {start_date} to {end_date}, Purpose: {purpose}"

            # Create a comprehensive system prompt that includes the base travel plan
            travel_plan = st.session_state.travel_plan if st.session_state.travel_plan else "No travel plan has been generated yet."
            travel_details = st.session_state.travel_details

            system_prompt = f"""You are an AI travel assistant helping a user with their trip.

            TRIP DETAILS:
            - Origin: {origin}
            - Destination: {destination}
            - Dates: {start_date} to {end_date}
            - Purpose: {purpose}

            BASE TRAVEL PLAN:
            {travel_plan}

            ADDITIONAL INFORMATION:
            - Weather: {travel_details.get('weather', 'Not available')}
            - Top Attractions: {travel_details.get('attractions', 'Not available')}
            - Restaurants: {travel_details.get('restaurants', 'Not available')}
            - Hotels: {travel_details.get('hotels', 'Not available')}
            - Flights: {travel_details.get('flights', 'Not available')}

            INSTRUCTIONS:
            - Remember all details about the user's trip when answering questions
            - Be concise but informative in your responses
            - If the user asks about information not in the plan, respond with relevant suggestions
            - If the user wants to modify their plan, acknowledge this and explain how the modification fits with the overall trip
            """

            # Create messages array for the LLM
            messages = [{"role": "system", "content": system_prompt}]

            # Add conversation history to messages
            for msg in st.session_state.conversation:
                if msg["role"] != "system":  # Avoid duplicate system messages
                    messages.append({"role": msg["role"], "content": msg["content"]})

            # Generate assistant response using the LLM
            try:
                # Using the llm in a way that works with both older and newer LLM interfaces
                if hasattr(llm, 'chat'):
                    # For newer LLM interfaces that use the chat method
                    response = llm.chat(messages)
                    assistant_response = response.content if hasattr(response, "content") else str(response)
                else:
                    # For older LLM interfaces or those using direct invoke
                    full_prompt = system_prompt + "\n\n" + "\n".join([f"{m['role']}: {m['content']}" for m in messages if m['role'] != "system"])
                    response = llm.invoke(full_prompt)
                    assistant_response = response.content if hasattr(response, "content") else str(response)

                # Add assistant response to conversation history
                st.session_state.conversation.append({"role": "assistant", "content": assistant_response})

            except Exception as e:
                st.error(f"Error generating response: {str(e)}")

            # Clear the message to process
            st.session_state.message_to_process = None

# Display the conversation history
st.subheader("💬 Your Conversation")
for message in st.session_state.conversation:
    if message["role"] == "user":
        st.markdown(f"**You:** {message['content']}")
    else:
        st.markdown(f"**Planner:** {message['content']}")

# # Input for user's message
# user_input = st.text_input("Your message:", key="chat_input")
# send_button = st.button("Send", key="send_btn")

# if send_button and user_input:
#     # Store the message to process in the next run
#     st.session_state.message_to_process = user_input
#     # # Clear the input
#     # st.session_state.chat_input = ""
#     update_message_to_process()

# Initialize the key in session state if it doesn't exist
if "user_input" not in st.session_state:
    st.session_state.user_input = ""

# Input for user's message - use a callback to handle submissions
def submit_message():
    if st.session_state.user_input.strip():
        st.session_state.message_to_process = st.session_state.user_input
        st.session_state.user_input = ""
        update_message_to_process()

# Create the text input with the callback
user_input = st.text_input(
    "Your message:",
    key="user_input",
    on_change=submit_message
)

# # Add a send button that also triggers the same callback
# if st.button("Send", key="send_btn"):
#     submit_message()
